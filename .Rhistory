filledActivity$steps <- lapply(activity$steps, fillMissing, activity$interval, avgStepsPerInterval)
View(filledActivity)
View(filledActivity[[1]][[1]])
fillMissing <- function(x, y, z){
if(is.na(x)){
return(z[z[,"interval"] == y, "average"])
} else {
return(x)
}
}
filledActivity$steps <- sapply(activity$steps, fillMissing, activity$interval, avgStepsPerInterval)
View(filledActivity)
filledActivity$steps[1]
View(avgStepsPerInterval)
fillMissing <- function(x, y, z){
if(is.na(x)){
return(z[z[,"interval"] == y, "average"])
} else {
return(x)
}
}
filledActivity$steps <- sapply(filledActivity$steps, fillMissing, filledActivity$interval, avgStepsPerInterval)
filledActivity$steps <- lapply(filledActivity$steps, fillMissing, filledActivity$interval, avgStepsPerInterval)
filledActivity <- activity
fillMissing <- function(x, y, z){
if(is.na(x)){
return(z[z[,"interval"] == y, "average"])
} else {
return(x)
}
}
filledActivity$steps <- lapply(filledActivity$steps, fillMissing, filledActivity$interval, avgStepsPerInterval)
filledActivity <- activity[1,]
fillMissing <- function(x, y, z){
str(z)
if(is.na(x)){
return(z[z[,"interval"] == y, "average"])
} else {
return(x)
}
}
filledActivity$steps <- lapply(filledActivity$steps, fillMissing, filledActivity$interval, avgStepsPerInterval)
View(filledActivity)
filledActivity <- activity[2,]
fillMissing <- function(x, y, z){
str(z)
if(is.na(x)){
return(z[z[,"interval"] == y, "average"])
} else {
return(x)
}
}
filledActivity$steps <- lapply(filledActivity$steps, fillMissing, filledActivity$interval, avgStepsPerInterval)
filledActivity <- activity[1:2,]
fillMissing <- function(x, y, z){
str(z)
if(is.na(x)){
return(z[z[,"interval"] == y, "average"])
} else {
return(x)
}
}
filledActivity$steps <- lapply(filledActivity$steps, fillMissing, filledActivity$interval, avgStepsPerInterval)
View(filledActivity[[1]][[1]])
filledActivity <- activity[1:2,]
fillMissing <- function(x, y, z){
str(z)
if(is.na(x)){
return(z[z[,"interval"] == y, "average"])
} else {
return(x)
}
}
lapply(filledActivity$steps, fillMissing, filledActivity$interval, avgStepsPerInterval)
filledActivity <- activity[1:2,]
fillMissing <- function(x, y, z){
str(z)
if(is.na(x)){
return(z[z[,"interval"] == y, "average"])
} else {
return(x)
}
}
apply(filledActivity$steps, fillMissing, filledActivity$interval, avgStepsPerInterval)
filledActivity <- activity[1:2,]
fillMissing <- function(x, y, z){
str(z)
if(is.na(x)){
return(z[z[,"interval"] == y, "average"])
} else {
return(x)
}
}
sapply(filledActivity$steps, fillMissing, filledActivity$interval, avgStepsPerInterval)
filledActivity <- activity
fillMissing <- function(x, y, z){
if(is.na(x)){
return(z[z[,"interval"] == y, "average"])
} else {
return(x)
}
}
filledActivity$steps <- sapply(filledActivity$steps, fillMissing, filledActivity$interval, avgStepsPerInterval)
View(filledActivity)
filledActivity <- activity
for(i in 1:nrow(filledActivity)){
if(is.na(filledActivity$steps[i])){
filledActivity$steps[i] <- as.numeric(avgStepsPerInterval[avgStepsPerInterval[,"interval"] == filledActivity$interval[i], "average"]))
for(i in 1:nrow(filledActivity)){
if(is.na(filledActivity$steps[i])){
filledActivity$steps[i] <- as.numeric(avgStepsPerInterval[avgStepsPerInterval[,"interval"] == filledActivity$interval[i], "average"])
}
}
View(filledActivity)
View(avgStepsPerInterval)
filledActivity <- activity
for(i in 1:nrow(filledActivity)){
if(is.na(filledActivity$steps[i])){
filledActivity$steps[i] <- avgStepsPerInterval[avgStepsPerInterval[,"interval"] == filledActivity$interval[i], "average"]
}
}
ds1 <- data.frame(col1 = c(NA, 2), col2 = c(A, B))
ds2 <- data.frame(colA = c(A, B), colB = c(90, 110))
ds1 <- data.frame(col1 = c(NA, 2), col2 = c("A", "B"))
ds2 <- data.frame(colA = c("A", "B"), colB = c(90, 110))
View(ds1)
for(i in 1:nrow(ds1)){
if(is.na(ds1$col1[i])){
ds1$col1[i] <- ds2[ds2[,"colA"] == ds1$col2[i], "colB"])
}
}
for(i in 1:nrow(ds1)){
if(is.na(ds1$col1[i])){
ds1$col1[i] <- ds2[ds2[,"colA"] == ds1$col2[i], "colB"]
}
}
ds1 <- data.frame(col1 = c(NA, 2), col2 = c("A", "B"))
ds2 <- data.frame(colA = c("A", "B"), colB = c(90, 110))
sFunc <- function(x, y, z){
if(is.na(x)){
return(z[z[,"colA"] == y, "colB"])
} else {
return(x)
}
}
ds1$col1 <- sapply(ds1$col1, sFunc, ds1$col2, ds2)
mapply(sFunc, ds1$col1, ds1$col2, ds2)
ds1$col1 <- mapply(sFunc, ds1$col1, ds1$col2, ds2)
ds1 <- data.frame(col1 = c(NA, 2), col2 = c("A", "B"))
ds2 <- data.frame(colA = c("A", "B"), colB = c(90, 110))
sFunc <- function(x, y, z){
if(is.na(x)){
return(z[z[,"colA"] == y, "colB"])
} else {
return(x)
}
}
ds1$col1 <- mapply(sFunc, ds1$col1, ds1$col2, ds2)
ds1 <- data.frame(col1 = c(NA, 2), col2 = c("A", "B"))
ds2 <- data.frame(colA = c("A", "B"), colB = c(90, 110))
sFunc <- function(x, y, z){
if(is.na(x)){
return(z[z[,"colA"] == y, "colB"])
} else {
return(x)
}
}
ds1$col1 <- mapply(sFunc, ds1$col1, ds1$col2, ds2)
View(ds2)
View(ds2)
View(ds1)
mapply(sFunc, ds1$col1, ds1$col2, ds2)
ds1 <- data.frame(col1 = c(NA, 2), col2 = c("A", "B"))
ds2 <- data.frame(colA = c("A", "B"), colB = c(90, 110))
sFunc <- function(x, y, z){
if(is.na(x)){
return(z[z[,"colA"] == y, "colB"])
} else {
return(x)
}
}
mapply(sFunc, ds1$col1, ds1$col2, ds2)
ds1$col1 <- sapply(sFunc, ds1$col1, ds1$col2, ds2)
sFunc <- function(x, y){
if(is.na(x)){
return(ds2[ds2[,"colA"] == y, "colB"])
} else {
return(x)
}
}
mapply(sFunc, ds1$col1, ds1$col2)
ds1 <- data.frame(col1 = c(NA, 2), col2 = c("A", "B"))
ds2 <- data.frame(colA = c("A", "B"), colB = c(90, 110))
mapply(function(){
if(is.na(x)){
return(ds2[ds2[,"colA"] == y, "colB"])
} else {
return(x)
}
}, ds1$col1, ds1$col2)
filledActivity <- activity
fillMissing <- function(x, y){
if(is.na(x)){
return(avgStepsPerInterval[avgStepsPerInterval[,"interval"] == y, "average"])
} else {
return(x)
}
}
filledActivity$steps <- mapply(sFunc, filledActivity$steps, filledActivity$interval)
filledActivity <- activity
fillMissing <- function(x, y){
if(is.na(x)){
return(avgStepsPerInterval[avgStepsPerInterval[,"interval"] == y, "average"])
} else {
return(x)
}
}
filledActivity$steps <- mapply(fillMissing, filledActivity$steps, filledActivity$interval)
View(filledActivity)
avgStepsPerInterval
avgStepsPerInterval[1]
avgStepsPerInterval[,1]
avgStepsPerInterval[1,]
avgStepsPerInterval[1,2]
as.numeric(avgStepsPerInterval[1,2])
str(avgStepsPerInterval)
str(avgStepsPerInterval[1,2])
View(filledActivity)
str(filledActivity)
str(filledActivity$steps)
as.numeric(filledActivity$steps)
filledActivity <- activity
fillMissing <- function(x, y){
if(is.na(x)){
return(avgStepsPerInterval[avgStepsPerInterval[,"interval"] == y, "average"])
} else {
return(x)
}
}
filledActivity$steps <- as.numeric(mapply(fillMissing, filledActivity$steps, filledActivity$interval))
suppressMessages(library(dplyr))
unzip("activity.zip")
activity <- read.csv("activity.csv")
stepsPerDay <- activity %>% group_by(date) %>% summarise(steps = sum(steps, na.rm = TRUE))
barplot(stepsPerDay$steps, names.arg = stepsPerDay$date, cex.names = 0.7, las = 2)
meanSteps <- mean(stepsPerDay$steps, na.rm = T)
medianSteps <- median(stepsPerDay$steps, na.rm = T)
avgStepsPerInterval <- activity %>% group_by(interval) %>% summarise(average = mean(steps, na.rm=TRUE))
plot(x = avgStepsPerInterval$interval, y = avgStepsPerInterval$average, type = "l",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days")
maximumStepsInInterval <- max(avgStepsPerInterval$average, na.rm = TRUE)
intervalWithMaxSteps <- avgStepsPerInterval$interval[avgStepsPerInterval$average == maximumStepsInInterval]
missingValues <- sum(is.na(activity$steps))
filledActivity <- activity
fillMissing <- function(x, y){
if(is.na(x)){
return(avgStepsPerInterval[avgStepsPerInterval[,"interval"] == y, "average"])
} else {
return(x)
}
}
filledActivity$steps <- as.numeric(mapply(fillMissing, filledActivity$steps, filledActivity$interval))
View(filledActivity)
str(activity)
str(avgStepsPerInterval)
str(filledActivity)
filledStepsPerDay <- filledActivity %>% group_by(date) %>% summarise(steps = sum(steps))
View(filledStepsPerDay)
View(stepsPerDay)
View(filledStepsPerDay)
View(activity)
round(1.23232)
round(1.23232,2)
suppressMessages(library(dplyr))
unzip("activity.zip")
activity <- read.csv("activity.csv")
stepsPerDay <- activity %>% group_by(date) %>% summarise(steps = sum(steps, na.rm = TRUE))
barplot(stepsPerDay$steps, names.arg = stepsPerDay$date, cex.names = 0.7, las = 2)
meanSteps <- round(mean(stepsPerDay$steps, na.rm = TRUE), 2)
medianSteps <- round(median(stepsPerDay$steps, na.rm = TRUE), 2)
avgStepsPerInterval <- activity %>% group_by(interval) %>% summarise(average = mean(steps, na.rm = TRUE))
plot(x = avgStepsPerInterval$interval, y = avgStepsPerInterval$average, type = "l",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days")
maximumStepsInInterval <- max(avgStepsPerInterval$average, na.rm = TRUE)
intervalWithMaxSteps <- avgStepsPerInterval$interval[avgStepsPerInterval$average == maximumStepsInInterval]
missingValues <- sum(is.na(activity$steps))
filledActivity <- activity
fillMissing <- function(x, y){
if(is.na(x)){
return(avgStepsPerInterval[avgStepsPerInterval[,"interval"] == y, "average"])
} else {
return(x)
}
}
filledActivity$steps <- as.numeric(mapply(fillMissing, filledActivity$steps, filledActivity$interval))
filledStepsPerDay <- filledActivity %>% group_by(date) %>% summarise(steps = sum(steps))
barplot(filledStepsPerDay$steps, names.arg = filledStepsPerDay$date, cex.names = 0.7, las = 2)
filledMeanSteps <- mean(filledStepsPerDay$steps)
filledMedianSteps <- median(filledStepsPerDay$steps)
View(stepsPerDay)
The mean of the total number of steps taken per day is `r meanSteps`
The median of the total number of steps taken per day is `r medianSteps`.
unlink('PA1_template_cache', recursive = TRUE)
unlink('PA1_template_cache', recursive = TRUE)
suppressMessages(library(dplyr))
unzip("activity.zip")
activity <- read.csv("activity.csv")
stepsPerDay <- activity %>% group_by(date) %>% summarise(steps = sum(steps, na.rm = TRUE))
barplot(stepsPerDay$steps, names.arg = stepsPerDay$date, cex.names = 0.7, las = 2)
meanSteps <- round(mean(stepsPerDay$steps, na.rm = TRUE), 2)
medianSteps <- median(stepsPerDay$steps, na.rm = TRUE)
avgStepsPerInterval <- activity %>% group_by(interval) %>% summarise(average = mean(steps, na.rm = TRUE))
plot(x = avgStepsPerInterval$interval, y = avgStepsPerInterval$average, type = "l",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days")
maximumStepsInInterval <- max(avgStepsPerInterval$average, na.rm = TRUE)
intervalWithMaxSteps <- avgStepsPerInterval$interval[avgStepsPerInterval$average == maximumStepsInInterval]
missingValues <- sum(is.na(activity$steps))
filledActivity <- activity
fillMissing <- function(x, y){
if(is.na(x)){
return(avgStepsPerInterval[avgStepsPerInterval[,"interval"] == y, "average"])
} else {
return(x)
}
}
filledActivity$steps <- as.numeric(mapply(fillMissing, filledActivity$steps, filledActivity$interval))
filledStepsPerDay <- filledActivity %>% group_by(date) %>% summarise(steps = sum(steps))
barplot(filledStepsPerDay$steps, names.arg = filledStepsPerDay$date, cex.names = 0.7, las = 2)
filledMeanSteps <- round(mean(filledStepsPerDay$steps), 2)
filledMedianSteps <- round(median(filledStepsPerDay$steps), 2)
filledMedianSteps <- round(median(filledStepsPerDay$steps), 2)
View(filledStepsPerDay)
mean(filledStepsPerDay$steps)
median(filledStepsPerDay$steps)
View(filledActivity)
str(filledMeanSteps)
View(filledStepsPerDay)
mean(head(filledStepsPerDay$steps))
median(head(filledStepsPerDay$steps))
median(filledStepsPerDay$steps)
median(filledStepsPerDay$steps, rm.na = TRUE)
View(filledActivity)
suppressMessages(library(lubridate))
install.packages(lubridate)
install.packages("lubridate")
suppressMessages(library(lubridate))
weekend <- which(weekdays(as.Date(activity2$date)) == "Saturday" |
weekdays(as.Date(activity2$date)) == "Sunday")
weekend <- which(weekdays(as.Date(activity$date)) == "Saturday" |
weekdays(as.Date(activity$date)) == "Sunday")
weekend
weekFactor <- function(x){
if(weekdays(as.Date(x)) %in% c("Saturday", "Sunday")){
return("Weekend")
} else {
return("Weekday")
}
}
activity$week <- mapply(fillMissing, activity$date)
View(activity)
suppressMessages(library(dplyr))
suppressMessages(library(lubridate))
unzip("activity.zip")
activity <- read.csv("activity.csv")
stepsPerDay <- activity %>% group_by(date) %>% summarise(steps = sum(steps, na.rm = TRUE))
barplot(stepsPerDay$steps, names.arg = stepsPerDay$date, cex.names = 0.7, las = 2)
meanSteps <- round(mean(stepsPerDay$steps, na.rm = TRUE), 2)
medianSteps <- median(stepsPerDay$steps, na.rm = TRUE)
avgStepsPerInterval <- activity %>% group_by(interval) %>% summarise(average = mean(steps, na.rm = TRUE))
plot(x = avgStepsPerInterval$interval, y = avgStepsPerInterval$average, type = "l",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days")
maximumStepsInInterval <- max(avgStepsPerInterval$average, na.rm = TRUE)
intervalWithMaxSteps <- avgStepsPerInterval$interval[avgStepsPerInterval$average == maximumStepsInInterval]
missingValues <- sum(is.na(activity$steps))
filledActivity <- activity
fillMissing <- function(x, y){
if(is.na(x)){
return(avgStepsPerInterval[avgStepsPerInterval[,"interval"] == y, "average"])
} else {
return(x)
}
}
filledActivity$steps <- as.numeric(mapply(fillMissing, filledActivity$steps, filledActivity$interval))
filledStepsPerDay <- filledActivity %>% group_by(date) %>% summarise(steps = sum(steps))
barplot(filledStepsPerDay$steps, names.arg = filledStepsPerDay$date, cex.names = 0.7, las = 2)
filledMeanSteps <- as.integer(mean(filledStepsPerDay$steps))
filledMedianSteps <- as.integer(median(filledStepsPerDay$steps))
weekFactor <- function(x){
if(weekdays(as.Date(x)) %in% c("Saturday", "Sunday")){
return("Weekend")
} else {
return("Weekday")
}
}
activity$week <- mapply(weekFactor, activity$date)
View(activity)
table(activity$week)
str(activity)
activity$week <- as.factor(mapply(weekFactor, activity$date))
str(activity)
table(activity$week)
avgStepsPerWeekdayType <- activity %>% group_by(week) %>% summarise(average = mean(steps, na.rm = TRUE))
View(avgStepsPerWeekdayType)
weekdayActivity <- filter(activity, week == "Weekday")
weekendActivity <- filter(activity, week == "Weekend")
avgStepsWeekday <- weekdayActivity %>% group_by(interval) %>% summarise(average = mean(steps, na.rm = TRUE))
View(avgStepsWeekday)
weekdayActivity <- filter(activity, week == "Weekday")
avgStepsWeekday <- weekdayActivity %>% group_by(interval) %>% summarise(average = mean(steps, na.rm = TRUE))
weekendActivity <- filter(activity, week == "Weekend")
avgStepsWeekend <- weekendActivity %>% group_by(interval) %>% summarise(average = mean(steps, na.rm = TRUE))
plot(x = avgStepsWeekday$interval, y = avgStepsWeekday$average, type = "l",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days")
plot(x = avgStepsWeekday$interval, y = avgStepsWeekday$average, type = "l",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days") +
lines(x = weekendActivity$interval, y = weekendActivity$average, type = "l")
View(weekendActivity)
plot(x = avgStepsWeekday$interval, y = avgStepsWeekday$average, type = "l",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days") +
lines(x = avgStepsWeekend$interval, y = avgStepsWeekend$average, type = "l")
plot(x = avgStepsWeekday$interval, y = avgStepsWeekday$average, type = "l", col = "blue",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days") +
lines(x = avgStepsWeekend$interval, y = avgStepsWeekend$average, type = "l", col = "red")
plot(x = avgStepsWeekday$interval, y = avgStepsWeekday$average, type = "l", col = "blue",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days") +
lines(x = avgStepsWeekend$interval, y = avgStepsWeekend$average, type = "l", col = "red") +
legend(activity$week)
plot(x = avgStepsWeekday$interval, y = avgStepsWeekday$average, type = "l", col = "blue",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days") +
lines(x = avgStepsWeekend$interval, y = avgStepsWeekend$average, type = "l", col = "red") +
legend(activity$week)
?legend
plot(x = avgStepsWeekday$interval, y = avgStepsWeekday$average, type = "l", col = "blue",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days") +
lines(x = avgStepsWeekend$interval, y = avgStepsWeekend$average, type = "l", col = "red") +
legend(c("blue","red"), c("Weekday", "Weekend"))
plot(x = avgStepsWeekday$interval, y = avgStepsWeekday$average, type = "l", col = "blue",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days") +
lines(x = avgStepsWeekend$interval, y = avgStepsWeekend$average, type = "l", col = "red") +
legend(c("blue","red"), legend = c("Weekday", "Weekend"))
plot(x = avgStepsWeekday$interval, y = avgStepsWeekday$average, type = "l", col = "blue",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days") +
lines(x = avgStepsWeekend$interval, y = avgStepsWeekend$average, type = "l", col = "red") +
legend(1, legend = c("Weekday", "Weekend"))
plot(x = avgStepsWeekday$interval, y = avgStepsWeekday$average, type = "l", col = "blue",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days") +
lines(x = avgStepsWeekend$interval, y = avgStepsWeekend$average, type = "l", col = "red") +
legend(1, legend = c("Weekday", "Weekend"))
plot(x = avgStepsWeekday$interval, y = avgStepsWeekday$average, type = "l", col = "blue",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days") +
lines(x = avgStepsWeekend$interval, y = avgStepsWeekend$average, type = "l", col = "red") +
legend("topleft", legend = c("Weekday", "Weekend"), col=c("red", "blue"))
plot(x = avgStepsWeekday$interval, y = avgStepsWeekday$average, type = "l", col = "blue",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days") +
lines(x = avgStepsWeekend$interval, y = avgStepsWeekend$average, type = "l", col = "red")
plot(x = avgStepsWeekday$interval, y = avgStepsWeekday$average, type = "l", col = "blue",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days") +
lines(x = avgStepsWeekend$interval, y = avgStepsWeekend$average, type = "l", col = "red") +
legend("topleft", legend = c("Weekday", "Weekend"))
plot(x = avgStepsWeekday$interval, y = avgStepsWeekday$average, type = "l", col = "blue",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days") +
lines(x = avgStepsWeekend$interval, y = avgStepsWeekend$average, type = "l", col = "red") +
legend("topleft", legend = c("Weekday", "Weekend"))
plot(x = avgStepsWeekday$interval, y = avgStepsWeekday$average, type = "l", col = "blue",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days") +
lines(x = avgStepsWeekend$interval, y = avgStepsWeekend$average, type = "l", col = "red")
plot(x = avgStepsWeekday$interval, y = avgStepsWeekday$average, type = "l", col = "blue",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days") +
lines(x = avgStepsWeekend$interval, y = avgStepsWeekend$average, type = "l", col = "red") +
legend(1, 95, legend = c("Weekday", "Weekend"), col=c("red", "blue"))
plot(x = avgStepsWeekday$interval, y = avgStepsWeekday$average, type = "l", col = "blue",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days")
lines(x = avgStepsWeekend$interval, y = avgStepsWeekend$average, type = "l", col = "red")
plot(x = avgStepsWeekday$interval, y = avgStepsWeekday$average, type = "l", col = "blue",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days")
plot(x = avgStepsWeekday$interval, y = avgStepsWeekday$average, type = "l", col = "blue",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days") +
legend(1, 95, legend = c("Weekday", "Weekend"), col=c("red", "blue"))
plot(x = avgStepsWeekday$interval, y = avgStepsWeekday$average, type = "l", col = "blue",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days")
legend(1, 95, legend = c("Weekday", "Weekend"), col=c("red", "blue"))
?plot
plot(x = avgStepsWeekday$interval, y = avgStepsWeekday$average, type = "l", col = "blue",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days")
plot(x = avgStepsWeekday$interval, y = avgStepsWeekday$average, type = "l", col = "blue",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days") +
legend("topleft", legend = c("Weekday", "Weekend"), col=c("red", "blue"))
plot(x = avgStepsWeekday$interval, y = avgStepsWeekday$average, type = "l", col = "blue",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days") +
legend("topleft", legend = activity$week, col=c("red", "blue"))
factor(activity$week)
levels(activity$week)
plot(x = avgStepsWeekday$interval, y = avgStepsWeekday$average, type = "l", col = "blue",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days") +
legend("topleft", legend = levels(activity$week), col=c("red", "blue"))
plot(x = avgStepsWeekday$interval, y = avgStepsWeekday$average, type = "l", col = "blue",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days") +
legend("bottomleft", legend = c("Weekday", "Weekend"), col=c("red", "blue"))
plot(x = avgStepsWeekday$interval, y = avgStepsWeekday$average, type = "l", col = "blue",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days")
plot(x = avgStepsWeekday$interval, y = avgStepsWeekday$average, type = "l", col = "blue",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days") +
lines(x = avgStepsWeekend$interval, y = avgStepsWeekend$average, type = "l", col = "red") +
legend("bottomleft", legend = c("Weekday", "Weekend"), col=c("red", "blue"))
str(avgStepsWeekday)
plot(x = avgStepsWeekday$interval, y = avgStepsWeekday$average, type = "l", col = "blue",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days")
lines(x = avgStepsWeekend$interval, y = avgStepsWeekend$average, type = "l", col = "red")
plot.new()
plot(x = avgStepsWeekday$interval, y = avgStepsWeekday$average, type = "l", col = "blue",
xlab="Intervals", ylab = "Average number of steps taken averaged across all days")
lines(x = avgStepsWeekend$interval, y = avgStepsWeekend$average, type = "l", col = "red")
